# Generated by Django 5.2 on 2025-05-03 15:13

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("alerts", "0002_initial"),
        ("companies", "0001_initial"),
        ("incidents", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Observable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("as", "As"),
                            ("domain", "Domain"),
                            ("email", "Email"),
                            ("email-attachment", "Email Attachment"),
                            ("email-body", "Email Body"),
                            ("email-header", "Email Header"),
                            ("email-subject", "Email Subject"),
                            ("hostname", "Hostname"),
                            ("ip", "Ip"),
                            ("ip-port", "Ip Port"),
                            ("mac-address", "Mac Address"),
                            ("uri", "Uri"),
                            ("url", "Url"),
                            ("user-agent", "User Agent"),
                            ("authentihash", "Authentihash"),
                            ("filename", "Filename"),
                            ("filepath", "Filepath"),
                            ("hash-md5", "Hash Md5"),
                            ("hash-sha1", "Hash Sha1"),
                            ("hash-sha256", "Hash Sha256"),
                            ("hash-sha512", "Hash Sha512"),
                            ("imphash", "Imphash"),
                            ("malware-sample", "Malware Sample"),
                            ("mime-type", "Mime Type"),
                            ("pehash", "Pehash"),
                            ("ssdeep", "Ssdeep"),
                            ("mutex", "Mutex"),
                            ("named-pipe", "Named Pipe"),
                            ("process", "Process"),
                            ("process-state", "Process State"),
                            ("regkey", "Registry"),
                            ("regkey|value", "Registry Value"),
                            ("windows-service-name", "Windows Service"),
                            ("windows-scheduled-task", "Windows Scheduled Task"),
                            ("bank-account-nr", "Bank Account"),
                            ("bic", "Bic"),
                            ("btc", "Bitcoin"),
                            ("cc-number", "Cc Number"),
                            ("iban", "Iban"),
                            ("first-name", "First Name"),
                            ("last-name", "Last Name"),
                            ("full-name", "Full Name"),
                            ("passport-number", "Passport Number"),
                            ("phone-number", "Phone Number"),
                            ("sigma", "Sigma"),
                            ("snort", "Snort"),
                            ("stix2-pattern", "Stix2"),
                            ("yara", "Yara"),
                            ("campaign-name", "Campaign Name"),
                            ("ja3-fingerprint-md5", "Ja3 Fingerprint"),
                            ("threat-actor", "Threat Actor"),
                            ("vulnerability", "Vulnerability"),
                            ("weakness", "Weakness"),
                            ("comment", "Comment"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        verbose_name="Type",
                    ),
                ),
                ("value", models.TextField(verbose_name="Value")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("antivirus", "Antivirus"),
                            ("artifacts", "Artifacts"),
                            ("attribution", "Attribution"),
                            ("external_analysis", "External Analysis"),
                            ("financial_fraud", "Financial Fraud"),
                            ("internal_reference", "Internal Reference"),
                            ("network_activity", "Network Activity"),
                            ("other", "Other"),
                            ("payload_delivery", "Payload Delivery"),
                            ("payload_installation", "Payload Installation"),
                            ("payload_type", "Payload Type"),
                            ("persistence", "Persistence"),
                            ("person", "Person"),
                            ("social_network", "Social Network"),
                            ("support_tool", "Support Tool"),
                            ("targeting", "Targeting"),
                        ],
                        default="other",
                        max_length=50,
                        verbose_name="Category",
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="First seen"
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last seen"
                    ),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "tlp",
                    models.IntegerField(
                        choices=[(0, "White"), (1, "Green"), (2, "Amber"), (3, "Red")],
                        default=2,
                        verbose_name="TLP (Traffic Light Protocol)",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Source of this observable (feed, product, analyst, etc.)",
                        max_length=100,
                        verbose_name="Source",
                    ),
                ),
                (
                    "confidence",
                    models.IntegerField(
                        default=50,
                        help_text="Confidence score (0-100)",
                        verbose_name="Confidence Score",
                    ),
                ),
                (
                    "enrichment_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data from enrichment services",
                        verbose_name="Enrichment Data",
                    ),
                ),
                (
                    "is_ioc",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this observable is confirmed as an Indicator of Compromise",
                        verbose_name="Is IOC",
                    ),
                ),
                (
                    "is_false_positive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this observable is a known false positive",
                        verbose_name="Is False Positive",
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_observables",
                        to="alerts.alert",
                        verbose_name="Related Alert",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observables",
                        to="companies.company",
                        verbose_name="Company",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_observables",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_observables",
                        to="incidents.incident",
                        verbose_name="Related Incident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Observable",
                "verbose_name_plural": "Observables",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ObservableRelationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("connected", "Connected"),
                            ("contains", "Contains"),
                            ("drops", "Drops"),
                            ("downloads", "Downloads"),
                            ("resolves_to", "Resolves To"),
                            ("communicates_with", "Communicates With"),
                            ("extracted_from", "Extracted From"),
                            ("created_by", "Created By"),
                            ("part_of", "Part Of"),
                            ("variant_of", "Variant Of"),
                        ],
                        default="connected",
                        max_length=50,
                        verbose_name="Relationship Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="Metadata"),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observable_relationships",
                        to="companies.company",
                        verbose_name="Company",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_relationships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationship_source",
                        to="observables.observable",
                        verbose_name="Source Observable",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationship_target",
                        to="observables.observable",
                        verbose_name="Target Observable",
                    ),
                ),
            ],
            options={
                "verbose_name": "Observable Relationship",
                "verbose_name_plural": "Observable Relationships",
                "unique_together": {("source", "target", "relationship_type")},
            },
        ),
        migrations.AddField(
            model_name="observable",
            name="related_observables",
            field=models.ManyToManyField(
                blank=True,
                related_name="related_to",
                through="observables.ObservableRelationship",
                to="observables.observable",
                verbose_name="Related Observables",
            ),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(
                fields=["company", "type"], name="observables_company_8a6309_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(
                fields=["company", "category"], name="observables_company_c3dff7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(fields=["alert"], name="observables_alert_i_4dba5a_idx"),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(
                fields=["incident"], name="observables_inciden_f51c97_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(fields=["is_ioc"], name="observables_is_ioc_c3bb9d_idx"),
        ),
        migrations.AddIndex(
            model_name="observable",
            index=models.Index(
                fields=["created_at"], name="observables_created_bb0694_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="observable",
            constraint=models.UniqueConstraint(
                fields=("type", "value", "company"),
                name="unique_observable_per_company",
            ),
        ),
    ]
