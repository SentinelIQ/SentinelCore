"""
Django settings for sentineliq project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-hxl-$88cl(eoptc84#3n3$7_lzcdy&nhi#m63&#emv(gyp^$o5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'drf_spectacular',
    'corsheaders',
    'django_celery_beat',
    
    # Project apps
    'auth_app',
    'companies',
    'api',
    'alerts',
    'incidents',
    'observables',
    'tasks',
    'audit_logs',
    'reporting',
    'wiki',
    'notifications',
    'dashboard',
    'sentinelvision',
    'mitre',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.core.middleware.RequestLoggingMiddleware',
    'api.core.middleware.TenantContextMiddleware',
    'api.core.middleware.SentryContextMiddleware',
    'audit_logs.middleware.AuditLogMiddleware',
]

ROOT_URLCONF = 'sentineliq.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sentineliq.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'sentineliq'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'postgres'),
        'HOST': os.getenv('DB_HOST', 'db'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom user model
AUTH_USER_MODEL = 'auth_app.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
    'VERSION_PARAM': 'version',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'api.core.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'api.core.exceptions.custom_exception_handler',
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME', 30))),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME', 1440))),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.getenv('JWT_SECRET_KEY', SECRET_KEY),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# DRF Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Sentineliq API',
    'DESCRIPTION': 'Enterprise-grade API for security event management with multi-tenant architecture',
    'VERSION': 'v1',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {'name': 'Authentication', 'description': 'Authentication endpoints for user login and token management'},
        {'name': 'Users', 'description': 'User management with role-based access control'},
        {'name': 'Companies', 'description': 'Multi-tenant company management and statistics'},
        {'name': 'Alerts', 'description': 'Security alert creation and management'},
        {'name': 'Incidents', 'description': 'Security incident handling and resolution'},
        {'name': 'Observables', 'description': 'Management of security observables and indicators of compromise (IOCs)'},
        {'name': 'Tasks', 'description': 'Incident response task management and tracking'},
        {'name': 'Common', 'description': 'Common utility endpoints for the application'},
        {'name': 'Reporting', 'description': 'Report generation for incidents in Markdown and PDF formats'},
        {'name': 'Wiki Articles', 'description': 'Knowledge base articles management for internal wiki'},
        {'name': 'Wiki Categories', 'description': 'Categories management for organizing knowledge base articles'},
        {'name': 'Notifications', 'description': 'System and user notifications with delivery channels and preferences'},
        {'name': 'SentinelVision Feeds', 'description': 'Threat intelligence feed management and consumption'},
        {'name': 'SentinelVision Analyzers', 'description': 'Enrichment and analysis modules for security observables'},
        {'name': 'SentinelVision Responders', 'description': 'Automated security response actions and integrations'},
        {'name': 'MITRE ATT&CK', 'description': 'MITRE ATT&CK framework tactics, techniques, and mitigations'},
        {'name': 'MITRE Mappings', 'description': 'Mappings between MITRE ATT&CK techniques and security entities'},
    ],
    'SECURITY': [{'Bearer': []}, {'BasicAuth': []}],
    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True,
        'displayOperationId': True,
        'deepLinking': True,
        'defaultModelsExpandDepth': 3,
        'defaultModelExpandDepth': 3,
        'docExpansion': 'none',
        'filter': True,
        'tagsSorter': 'alpha',
        'operationsSorter': 'alpha',
    },
    'SERVERS': [
        {'url': '/', 'description': 'Current server'}
    ],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'Bearer': {
                'type': 'apiKey',
                'in': 'header',
                'name': 'Authorization',
                'description': 'Enter "Bearer" followed by a space and the JWT token'
            },
            'BasicAuth': {
                'type': 'http',
                'scheme': 'basic',
                'description': 'Email and Password authentication. Use the endpoint /api/v1/auth/token/email/ to obtain a token.'
            }
        }
    },
    # Standardized enum names to prevent collisions in OpenAPI schema
    'ENUM_NAME_OVERRIDES': {
        # Alerts
        'AlertSeverityEnum': 'AlertSeverity',
        'AlertStatusEnum': 'AlertStatus',
        'AlertTLPEnum': 'AlertTLP',
        'AlertPAPEnum': 'AlertPAP',
        
        # Incidents
        'IncidentSeverityEnum': 'IncidentSeverity',
        'IncidentStatusEnum': 'IncidentStatus',
        'IncidentTLPEnum': 'IncidentTLP',
        'IncidentPAPEnum': 'IncidentPAP',
        'TimelineEventTypeEnum': 'TimelineEventType',
        'IncidentTaskStatusEnum': 'IncidentTaskStatus',
        
        # Observables
        'ObservableCategoryEnum': 'ObservableCategory',
        'ObservableTypeEnum': 'ObservableType',
        'ObservableTLPEnum': 'ObservableTLP',
        'ObservableRelationTypeEnum': 'ObservableRelationType',
        
        # Tasks
        'TaskStatusEnum': 'TaskStatus',
        'TaskPriorityEnum': 'TaskPriority',
        
        # Wiki
        'ArticleVisibilityEnum': 'ArticleVisibility',
        
        # Auth
        'UserRoleEnum': 'UserRole',
        
        # Notifications
        'NotificationChannelTypeEnum': 'NotificationChannelType',
        'NotificationEventTypeEnum': 'NotificationEventType',
        'NotificationPriorityEnum': 'NotificationPriority',
        'NotificationCategoryEnum': 'NotificationCategory',
        'NotificationDeliveryStatusEnum': 'NotificationDeliveryStatus',
        
        # MITRE
        'MitreRelationshipTypeEnum': 'MitreRelationshipType',
        
        # Companies
        'CompanyStatusEnum': 'CompanyStatus',
        'CompanyTypeEnum': 'CompanyType',
        
        # Dashboard
        'TimeRangeEnum': 'TimeRange',
        'WidgetTypeEnum': 'WidgetType',
        'ChartTypeEnum': 'ChartType',
        
        # Reporting
        'ReportFormatEnum': 'ReportFormat',
        'ReportTemplateEnum': 'ReportTemplate',
        'ReportEntityTypeEnum': 'ReportEntityType',
        
        # SentinelVision
        'ModuleTypeEnum': 'ModuleType',
        'ModuleStatusEnum': 'ModuleStatus',
        'FeedTypeEnum': 'FeedType',
        'AnalyzerTypeEnum': 'AnalyzerType',
        'ResponderTypeEnum': 'ResponderType',
        
        # Common
        'PriorityEnum': 'Priority',
        'StatusEnum': 'Status',
        'TLPEnum': 'TLP',
        'PAPEnum': 'PAP',
        'ActionTypeEnum': 'ActionType',
    },
    # Example responses
    'EXAMPLES_FACTORY': 'api.core.openapi.get_examples',
}

# Application environment
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'celery_verbose': {
            'format': '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'celery_simple': {
            'format': '[%(levelname)s] %(message)s',
        },
        'json': {
            'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "message": "%(message)s", "module": "%(module)s", "process": "%(process)d", "thread": "%(thread)d"}',
            'datefmt': '%Y-%m-%dT%H:%M:%S%z',
            'class': 'logging.Formatter',
        },
        'standard_utc': {
            'format': '[%(asctime)s UTC] [%(levelname)s] [%(name)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'console_simple': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'celery_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard_utc',
        },
        'file_api': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/api.log'),
            'formatter': 'verbose',
        },
        'file_api_simple': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/api.log'),
            'formatter': 'simple',
        },
        'file_celery': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/celery.log'),
            'formatter': 'standard_utc',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/error.log'),
            'formatter': 'verbose',
        },
        'file_django': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'logging.NullHandler',  # Sentry directly integrates
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_django'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file_error', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console', 'file_django'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'] if DEBUG else [],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'api': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'api.core.tasks': {
            'handlers': ['celery_console', 'file_celery', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'alerts': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'incidents': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'observables': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'tasks': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'audit_logs': {
            'handlers': ['console', 'file_api'],
            'level': 'INFO',
            'propagate': False,
        },
        'sentinelvision': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'mitre': {
            'handlers': ['console', 'file_api', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'sentry': {
            'handlers': ['console', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['celery_console', 'file_celery'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.task': {
            'handlers': ['celery_console', 'file_celery', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.worker': {
            'handlers': ['celery_console', 'file_celery'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.beat': {
            'handlers': ['celery_console', 'file_celery'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Make sure logs directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Django-filter settings
DJANGO_FILTERS_ARRAYFIELD_OVERRIDE = True

# Custom django-filters settings
FILTERS_OVERRIDES = {
    'DEFAULT_FILTER_OVERRIDES': {
        'django.contrib.postgres.fields.ArrayField': {
            'filter_class': 'api.core.filters.ArrayFieldFilter',
            'extra': lambda f: {
                'lookup_expr': 'contains',
            }
        }
    }
}

# Celery settings
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'amqp://guest:guest@rabbitmq:5672//')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')

# Settings for serialization/deserialization of task messages
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Advanced Celery settings
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100  # Restart worker after processing N tasks
CELERY_TASK_TIME_LIMIT = 1800  # Hard time limit (30 min)
CELERY_TASK_SOFT_TIME_LIMIT = 1500  # Soft time limit (25 min)
CELERY_TASK_ACKS_LATE = True  # Only acknowledge task after it's executed
CELERY_TASK_REJECT_ON_WORKER_LOST = True  # Re-queue task if worker crashes
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Don't prefetch more tasks than workers
CELERY_TASK_TRACK_STARTED = True  # Track when task is started
CELERY_WORKER_HIJACK_ROOT_LOGGER = False  # Don't hijack root logger
CELERY_WORKER_DIRECT = False  # Make worker consume from all queues
CELERY_WORKER_CANCEL_LONG_RUNNING_TASKS_ON_CONNECTION_LOSS = True  # Cancel tasks on connection loss
CELERY_WORKER_SEND_TASK_EVENTS = True  # Send task-related events

# Database scheduler configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task routes for directing tasks to specific queues
CELERY_TASK_ROUTES = {
    # Default route for tasks that don't specify a queue
    '*': {'queue': 'celery'},
    
    # Setup tasks (migrations, MISP, etc.)
    'api.core.tasks.run_migrations': {'queue': 'sentineliq_soar_setup'},
    'mitre.tasks.*': {'queue': 'sentineliq_soar_setup'},
    
    # Vision tasks (AI module) - Split by functionality
    'sentinelvision.tasks.feed_tasks.*': {'queue': 'sentineliq_soar_vision_feed'},
    'sentinelvision.tasks.feed_dispatcher.*': {'queue': 'sentineliq_soar_vision_feed'},
    'sentinelvision.tasks.enrichment_tasks.*': {'queue': 'sentineliq_soar_vision_enrichment'},
    'sentinelvision.tasks.responder_tasks.*': {'queue': 'sentineliq_soar_vision_responder'},
    'sentinelvision.tasks.analyzer_tasks.*': {'queue': 'sentineliq_soar_vision_analyzer'},
    
    # Notification tasks
    'notifications.tasks.*': {'queue': 'sentineliq_soar_notification'},
}

# Rate limiting settings
CELERY_TASK_DEFAULT_RATE_LIMIT = '100/m'  # Default rate limit for all tasks
CELERY_WORKER_DISABLE_RATE_LIMITS = False  # Enable rate limiting

# Celery Beat scheduled tasks
CELERY_BEAT_SCHEDULE = {
    'schedule-pending-feeds': {
        'task': 'sentinelvision.tasks.feed_tasks.schedule_pending_feeds',
        'schedule': timedelta(minutes=5),
        'options': {'queue': 'sentineliq_soar_vision_feed'}
    },
    'retry-failed-feeds': {
        'task': 'sentinelvision.tasks.feed_tasks.retry_failed_feeds',
        'schedule': timedelta(hours=1),
        'options': {'queue': 'sentineliq_soar_vision_feed'}
    },
    'ssl-blacklist-update': {
        'task': 'sentinelvision.feeds.ssl_blacklist.update',
        'schedule': timedelta(hours=12),  # Run every 12 hours
        'options': {'queue': 'sentineliq_soar_vision_feed'}
    },
    # New centralized feed dispatcher task (runs every 15 minutes as requested)
    'update-all-feeds-centralized': {
        'task': 'sentinelvision.tasks.feed_dispatcher.update_all_feeds',
        'schedule': timedelta(minutes=15),  # Run every 15 minutes
        'kwargs': {'concurrent': True},  # Run feeds concurrently
        'options': {'queue': 'sentineliq_soar_vision_feed'}
    },
    'reenrich-observables': {
        'task': 'sentinelvision.tasks.enrichment_tasks.reenrich_observables',
        'schedule': timedelta(hours=12),
        'kwargs': {'days': 7, 'limit': 200},
        'options': {'queue': 'sentineliq_soar_vision_enrichment'}
    },
    'sync-mitre-data': {
        'task': 'mitre.tasks.sync_mitre_data',
        'schedule': timedelta(seconds=1),  # Change from 10 seconds to 60 minutes
        'options': {'queue': 'sentineliq_soar_setup'}
    },
    'auto-run-migrations': {
        'task': 'api.core.tasks.run_migrations',
        'schedule': timedelta(hours=24),  # Run once a day
        'options': {'queue': 'sentineliq_soar_setup'}
    }
}

# Email settings (for notifications)
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@sentineliq.com')

# Elasticsearch settings
ELASTICSEARCH_HOSTS = os.getenv('ELASTICSEARCH_HOSTS', 'http://elasticsearch:9200').split(',')
ELASTICSEARCH_USERNAME = os.getenv('ELASTICSEARCH_USERNAME', 'elastic')
ELASTICSEARCH_PASSWORD = os.getenv('ELASTICSEARCH_PASSWORD', 'changeme')
ELASTICSEARCH_VERIFY_CERTS = os.getenv('ELASTICSEARCH_VERIFY_CERTS', 'False') == 'True'

# Sentry Configuration
# The DSN should be set in the environment variable SENTRY_DSN
SENTRY_DSN = os.getenv('SENTRY_DSN', 'https://3a46c79a44b25a0942956e683f4d6c22@o4508786411307008.ingest.us.sentry.io/4509251376185344')
SENTRY_SAMPLE_RATE = float(os.getenv('SENTRY_SAMPLE_RATE', '1.0'))  # Default to 100% in non-production
SENTRY_TRACES_SAMPLE_RATE = float(os.getenv('SENTRY_TRACES_SAMPLE_RATE', '1.0'))
SENTRY_PROFILES_SAMPLE_RATE = float(os.getenv('SENTRY_PROFILES_SAMPLE_RATE', '1.0'))
SENTRY_RELEASE = os.getenv('SENTRY_RELEASE', None)
# Sentry will take the environment from the ENVIRONMENT setting
