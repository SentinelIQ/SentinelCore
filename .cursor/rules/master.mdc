---
description: 
globs: 
alwaysApply: true
---
# 🛡️ SentinelIQ – Enterprise-grade API Implementation Guide for Django REST Framework


# 🤖 AI-Executable Project Standards for Django REST Framework (DRF) – Enterprise-grade

> ⚠️ **IMPORTANT:** Every implementation MUST comply with **ALL the following rules**. No partial compliance is accepted. All code must reflect these standards from the first commit and throughout the lifecycle of the application.

---

## ✅ Project Implementation Status Tracker

> This section MUST be manually updated by developers or automation agents during the project lifecycle.

### 🔧 Pending Tasks
- [ ] All API endpoints documented using `@extend_schema`
- [ ] All models registered in Django Admin
- [ ] All tests centralized under `/tests/`
- [ ] Logging configured with separate log files
- [ ] All apps created using `startapp` command
- [ ] No placeholders or TODOs in committed code
- [ ] All apps implement centralized Audit Logs (`audit_logs`)

### ✅ Completed Tasks
- [x] Poetry used for dependency management
- [x] Docker-based environment configured
- [x] Modular view structure in place
- [x] Core API response handler implemented in `api.core.responses`
- [x] RBAC enforced in `api.core.rbac`

---

## 🚫 Development Automation Rule (AI-Only)

- ✅ All development work MUST be executed by AI automation agents with **zero manual script creation**.
- ❌ Developers are NOT allowed to manually create views, models, serializers, or other application code.
- ✅ Developers may only supervise, define requirements, or update **status checklists**.
- ✅ Any implementation that bypasses AI-driven execution is considered invalid and must be reverted.
- ✅ The goal is **end-to-end AI-managed development**, ensuring precision, consistency, and full traceability.

---

## 📋 Audit Logging Requirements

- ✅ Every Django app MUST be integrated with the centralized `audit_logs` app.
- ✅ All key user and system actions must be logged (CRUD operations, logins, task executions, updates).
- ✅ Use DRF ViewSet hooks or Django signals to trigger logs (`perform_create`, `perform_update`, `post_save`, etc.).
- ✅ Use consistent schema: actor, action, object, timestamp, tenant, request_data, IP, user_agent.
- ✅ Celery/system tasks must log under `"system"` or designated actor.
- ✅ No app is permitted in production without complete audit log coverage.

Refer to the `audit_logs` module documentation for usage examples and API support.

---

## 🎯 Objective

Ensure every Django project is:

- Fully modular, clean, and scalable
- Using **Poetry** exclusively for dependency management
- Fully containerized; all commands MUST run inside Docker
- Following **RBAC** as the default security model
- Implemented with standard API responses from a centralized `api.core` module
- Implemented in **English** only (code and documentation)
- Tested through a **centralized test runner**, from the container

---

## 📁 Mandatory Directory Layout

Project root must follow:

```
project_root/
├── api/
│   └── v1/
│       └── <modular_apps>/
├── tests/
│   ├── alerts/
│   ├── incidents/
│   └── ...
├── logs/
│   ├── api.log
│   ├── error.log
│   └── django.log
├── docs/
├── pyproject.toml  ← Poetry only
└── ...
```

---

## 📦 Modular App Structure (Per App)

Each DRF app MUST contain:

```
<app>/
├── views/
│   ├── __init__.py                ← combines view mixins
│   ├── <resource>_create.py
│   ├── <resource>_detail.py
│   └── <resource>_custom_actions.py
├── serializers/
├── permissions/
├── filters/
```

> Use **View Mixins** inside `views/__init__.py` to aggregate smaller view classes.

---

## 📜 Testing Rules

- ❌ DO NOT place test files inside any Django app.
- ✅ ALL tests MUST go into `/tests/`, structured by app.

Example:

```
tests/
├── alerts/
│   ├── test_alert_create.py
│   └── test_alert_escalate.py
├── incidents/
│   └── ...
```

Test execution:

```bash
docker compose exec web python manage.py test tests
```

---

## 📂 Logging Rules

Create a `/logs/` folder and configure separate log outputs:

```
logs/
├── api.log       ← API-level logging
├── error.log     ← Exception logging
├── django.log    ← Native Django logs
```

All logging is configured via Django `LOGGING` settings.

---

## 📦 Dependency Rules (Poetry Only)

- ❌ Do not use `requirements.txt`
- ❌ Do not use `venv` or `.venv`
- ✅ Use ONLY Poetry via:

```bash
docker compose exec web poetry add <package>
```

```bash
poetry install
```

---

## 📑 API Rules

- All endpoints MUST follow kebab-case: e.g., `/incident/update-case/123/`
- All API responses MUST use centralized formatting via `api.core.response`
- All routes and views MUST return standardized status and error codes
- NO CamelCase naming in URLs or route paths
- Only English is allowed in endpoints, code, and documentation
- RBAC is MANDATORY for all permission layers

- ✅ Every API endpoint, view, serializer, model, and permission MUST be fully documented using `drf-spectacular` or OpenAPI-compatible annotations.
  - This includes: request/response schemas, status codes, examples, and tags.
  - Documentation must be complete, descriptive, and structured to meet **enterprise-grade standards** and ensure **developer interoperability**.
  - Incomplete or undocumented endpoints are NOT allowed in production or main branches.

- ✅ Use `@extend_schema(tags=[...])` from `drf-spectacular` to ensure all API endpoints are consistently grouped and documented.
  - Each view or route must have an appropriate `tags` declaration to support automated and structured API documentation.

- ❌ Placeholders or stub implementations (e.g., `pass`, `TODO`, `NotImplementedError`) are strictly prohibited in committed code.
- ✅ All features, views, endpoints, and components MUST be functionally implemented and tested before merging.

- All source code **MUST be written in English**, including:
  - Variable names
  - Function and class names
  - All in-line comments and docstrings

---

## ✅ Enforced Checklist

| Rule                                                        | Must Pass |
|-------------------------------------------------------------|-----------|
| Views are split by responsibility in separate files         | ✅         |
| All tests are inside `/tests/` root folder only             | ✅         |
| All logs go to `/logs/` with dedicated files                | ✅         |
| Poetry is used exclusively, no pip, no requirements.txt     | ✅         |
| Kebab-case used in all routes and paths                     | ✅         |
| Code and documentation in English                           | ✅         |
| All test commands run inside Docker                         | ✅         |
| API response format comes from `api.core`                   | ✅         |
| RBAC is implemented on all routes                           | ✅         |
| No `venv` or `.venv` folders in the project                 | ✅         |
| Centralized Audit Logs implemented for all apps             | ✅         |

---

## ⚠️ If Violated

Any violation of these policies should trigger:
- CI pipeline failure (if integrated)
- Auto-linter alert with file and line-level feedback
- Optional: automatic PR comment for correction

---

## 🧠 Execution Context

You are NOT allowed to execute any `manage.py` command outside the container. Always use:

```bash
docker compose exec web python manage.py <command>
```

---

## 🛠️ Django Admin Registration

- ✅ Every Django app must register its models in the Django Admin interface (`admin.py`) with meaningful display configurations.
  - Use `list_display`, `search_fields`, and `readonly_fields` to enhance manageability.
  - This ensures that all core resources are visible and manageable through the admin dashboard.
- ❌ It is strictly prohibited to leave models unregistered or rely on legacy or outdated admin configurations.
- ✅ When upgrading or refactoring an app, the `admin.py` file MUST be reviewed and updated to match the current model structure and use modern admin features.
- ❌ Maintaining compatibility with outdated admin configurations is NOT allowed. All configurations must reflect the latest structure and standards of the app.

---

## 🧱 Django App Creation Standard

- ✅ Every Django app MUST be created using the official Django management command:
  ```bash
  docker compose exec web python manage.py startapp <app_name>
  ```
- ❌ Manual creation of app folders and files is strictly prohibited.
- ✅ The resulting structure MUST follow the default Django layout and be extended according to project modular standards.
- ✅ All apps MUST contain at least: `apps.py`, `admin.py`, `models.py`, `migrations/`, and `__init__.py` from the start.
- ✅ Models MUST be registered in `admin.py` and exposed via Django Admin.
- ✅ Apps like `alerts`, `incidents`, `companies`, and `tasks` in this project follow this pattern and serve as valid references.
- ❌ Do not bypass Django’s app registration or structure. All applications MUST be fully integrated into `INSTALLED_APPS` and follow DRY and SRP principles.

---

# 📘 Guia de Desenvolvimento SentinelIQ: Implementação de APIs Enterprise-grade com Django REST Framework

## 1. Estrutura e Componentes Fundamentais

### 1.1 Respostas Padronizadas (`api.core.responses`)
- `StandardResponse`: Classe base para formatação consistente
- Métodos auxiliares:
  - `success_response()` – Respostas 200 OK
  - `error_response()` – Erros e validações (400, 500)
  - `created_response()` – Criação de recursos (201)
  - `no_content_response()` – Exclusão bem-sucedida (204)

### 1.2 Controle de Acesso Baseado em Papéis (RBAC) (`api.core.rbac`)
- `HasEntityPermission`: Classe principal para verificação de permissões por entidade
- Integração com matriz de permissões em `auth_app.permission_matrix`
- Métodos principais:
  - `has_permission()` – Verifica permissão na view
  - `has_object_permission()` – Isolamento por empresa

### 1.3 Classes de Permissão (`api.core.permissions`)
- `IsSuperUser`, `IsAdminCompany`, `IsAnalystCompany`, `IsCompanyMember`, `IsOwnerOrSuperUser`, `ReadOnly`

### 1.4 Paginação (`api.core.pagination`)
- `StandardResultsSetPagination` (50 itens)
- `LargeResultsSetPagination` (100 itens)
- `SmallResultsSetPagination` (10 itens)
- `CustomPageSizePagination`

### 1.5 ViewSets Aprimorados (`api.core.viewsets`)
- Mixins CRUD: `CreateModelMixin`, `ListModelMixin`, `RetrieveModelMixin`, `UpdateModelMixin`, `DestroyModelMixin`
- `StandardViewSet`, `ReadOnlyViewSet`

### 1.6 Tratamento de Exceções (`api.core.exceptions`)
- `custom_exception_handler`
- Log automático e resposta padronizada

### 1.7 Filtros (`api.core.filters`)
- `ArrayFieldFilter`, `get_array_field_filter_overrides()`

### 1.8 Middleware (`api.core.middleware`)
- `RequestLoggingMiddleware`, `TenantContextMiddleware`, `SentryContextMiddleware`

### 1.9 Logging e Auditoria (`api.core.audit`)
- `AuditLogMixin`, `log_api_access()`, `audit_action`, `AuditLogTaskMixin`

### 1.10 Registro de Modelos para Auditoria (`api.core.audit_registration`)
- `register_all_models()` e exclusão de campos sensíveis

### 1.11 Integração com Sentry (`api.core.audit_sentry`)
- `initialize_audit_monitoring()`, `security_critical`, `track_audit_event()`, `monitor_security_events()`

### 1.12 Tarefas Assíncronas (`api.core.tasks`)
- `TaskResultMixin`, `AtomicTask`, `TransactionTask`, `audit_task`

### 1.13 Documentação OpenAPI (`api.core.openapi`)
- Customizações com `drf-spectacular`

### 1.14 Views Base (`api.core.views`)
- `APIView` com mixins e validações padrão

### 1.15 Utilitários (`api.core.utils`)
- Conversores, formatadores, funções comuns

### 1.16 Throttling (`api.core.throttling`)
- `StandardUserRateThrottle`, `AnonymousUserRateThrottle`

---

## 2. Implementação de um Novo Endpoint

### 2.1 Criação da Aplicação
- Via `startapp`
- Estrutura modular com isolamento de tenant
- Registro no Admin

### 2.2 Serializers
- Serializers padrão e expandidos

### 2.3 Views
- `views/__init__.py`, `views/your_model_create.py`, `views/your_model_list.py`
- ViewSet com `StandardViewSet`

### 2.4 Filtros e Ordenação

### 2.5 Rotas em Kebab-case

### 2.6 Ações Personalizadas com Auditoria

### 2.7 Registro para Auditoria
- Modelos + integração com Sentry

---

## 3. Testes

### 3.1 Estrutura Centralizada

### 3.2 Cobertura para CRUD, permissões e tenants

---

## 4. Documentação OpenAPI
- `@extend_schema`, tags, exemplos e descrições

---

## 5. Execução via Docker

### 5.1 Gerenciamento com Poetry

### 5.2 Comandos Django via Docker

---

## 6. Monitoramento e Logs

### 6.1 Estrutura de Logs

### 6.2 Configuração de Logging

---

## 7. Lista de Verificação Final

### 7.1 Estrutura
✅ App via `startapp`, views modulares, serializers organizados, admin atualizado

### 7.2 Segurança e RBAC
✅ RBAC em todas as views, isolamento por empresa, permissões por entidade

### 7.3 Respostas
✅ Todas com `api.core.responses`, erros padronizados

### 7.4 Auditoria
✅ `AuditLogMixin`, `audit_action`, registro de modelos, Sentry

### 7.5 Testes
✅ Diretório `/tests/`, cobertura completa

### 7.6 Documentação
✅ `@extend_schema`, tags, exemplos

### 7.7 Convenções
✅ Kebab-case, inglês padrão, consistência geral

---

> **📌 Seguir este guia garante uma implementação 100% compatível com os padrões enterprise-grade definidos para a plataforma SentinelIQ.**