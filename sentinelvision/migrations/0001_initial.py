# Generated by Django 5.2 on 2025-05-03 15:13

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("alerts", "0002_initial"),
        ("companies", "0001_initial"),
        ("incidents", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FeedModule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, verbose_name="Module Name")),
                (
                    "module_type",
                    models.CharField(
                        choices=[
                            ("feed", "Feed Module"),
                            ("analyzer", "Analyzer Module"),
                            ("responder", "Responder Module"),
                        ],
                        max_length=50,
                        verbose_name="Module Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "cron_schedule",
                    models.CharField(
                        blank=True,
                        help_text='Cron expression for scheduled execution (e.g., "0 */12 * * *" for every 12 hours)',
                        max_length=100,
                        verbose_name="Cron Schedule",
                    ),
                ),
                (
                    "last_run",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Run"
                    ),
                ),
                ("last_error", models.TextField(blank=True, verbose_name="Last Error")),
                (
                    "error_count",
                    models.PositiveIntegerField(default=0, verbose_name="Error Count"),
                ),
                (
                    "total_processed",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Processed"
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(default=0.0, verbose_name="Success Rate"),
                ),
                ("feed_url", models.URLField(max_length=500, verbose_name="Feed URL")),
                (
                    "interval_hours",
                    models.PositiveIntegerField(
                        default=24, verbose_name="Update Interval (hours)"
                    ),
                ),
                (
                    "auto_mark_as_ioc",
                    models.BooleanField(default=True, verbose_name="Auto-mark as IOC"),
                ),
                (
                    "last_successful_fetch",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Successful Fetch"
                    ),
                ),
                (
                    "total_iocs_imported",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total IOCs Imported"
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        help_text="Leave empty for global modules accessible only to superadmins",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_modules",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feed Module",
                "verbose_name_plural": "Feed Modules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AnalyzerModule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, verbose_name="Module Name")),
                (
                    "module_type",
                    models.CharField(
                        choices=[
                            ("feed", "Feed Module"),
                            ("analyzer", "Analyzer Module"),
                            ("responder", "Responder Module"),
                        ],
                        max_length=50,
                        verbose_name="Module Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "cron_schedule",
                    models.CharField(
                        blank=True,
                        help_text='Cron expression for scheduled execution (e.g., "0 */12 * * *" for every 12 hours)',
                        max_length=100,
                        verbose_name="Cron Schedule",
                    ),
                ),
                (
                    "last_run",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Run"
                    ),
                ),
                ("last_error", models.TextField(blank=True, verbose_name="Last Error")),
                (
                    "error_count",
                    models.PositiveIntegerField(default=0, verbose_name="Error Count"),
                ),
                (
                    "total_processed",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Processed"
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(default=0.0, verbose_name="Success Rate"),
                ),
                (
                    "analysis_type",
                    models.CharField(max_length=50, verbose_name="Analysis Type"),
                ),
                (
                    "confidence_threshold",
                    models.FloatField(default=0.7, verbose_name="Confidence Threshold"),
                ),
                (
                    "max_analysis_time",
                    models.PositiveIntegerField(
                        default=30, verbose_name="Max Analysis Time (seconds)"
                    ),
                ),
                (
                    "total_analyses",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Analyses"
                    ),
                ),
                (
                    "total_findings",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Findings"
                    ),
                ),
                (
                    "average_confidence",
                    models.FloatField(default=0.0, verbose_name="Average Confidence"),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        help_text="Leave empty for global modules accessible only to superadmins",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_modules",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analyzer Module",
                "verbose_name_plural": "Analyzer Modules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AlienVaultReputationFeed",
            fields=[
                (
                    "feedmodule_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sentinelvision.feedmodule",
                    ),
                ),
                (
                    "es_index_name",
                    models.CharField(
                        default="sentineliq-alienvault-reputation",
                        help_text="Elasticsearch index where data will be stored",
                        max_length=100,
                        verbose_name="Elasticsearch Index",
                    ),
                ),
            ],
            options={
                "verbose_name": "AlienVault Reputation Feed",
                "verbose_name_plural": "AlienVault Reputation Feeds",
            },
            bases=("sentinelvision.feedmodule",),
        ),
        migrations.CreateModel(
            name="BlocklistDeFeed",
            fields=[
                (
                    "feedmodule_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sentinelvision.feedmodule",
                    ),
                ),
                (
                    "es_index_name",
                    models.CharField(
                        default="sentineliq-blocklist-de",
                        help_text="Elasticsearch index where data will be stored",
                        max_length=100,
                        verbose_name="Elasticsearch Index",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blocklist.de Feed",
                "verbose_name_plural": "Blocklist.de Feeds",
            },
            bases=("sentinelvision.feedmodule",),
        ),
        migrations.CreateModel(
            name="SSLBlacklistFeed",
            fields=[
                (
                    "feedmodule_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sentinelvision.feedmodule",
                    ),
                ),
                (
                    "es_index_name",
                    models.CharField(
                        default="sentineliq-ssl-blacklist",
                        help_text="Elasticsearch index where data will be stored",
                        max_length=100,
                        verbose_name="Elasticsearch Index",
                    ),
                ),
            ],
            options={
                "verbose_name": "SSL Certificate Blacklist",
                "verbose_name_plural": "SSL Certificate Blacklists",
            },
            bases=("sentinelvision.feedmodule",),
        ),
        migrations.CreateModel(
            name="VirusTotalAnalyzer",
            fields=[
                (
                    "analyzermodule_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="sentinelvision.analyzermodule",
                    ),
                ),
                ("api_key", models.CharField(max_length=255, verbose_name="API Key")),
                (
                    "use_premium_api",
                    models.BooleanField(default=False, verbose_name="Use Premium API"),
                ),
                (
                    "request_rate_limit",
                    models.PositiveIntegerField(
                        default=4,
                        help_text="Requests per minute allowed by your VirusTotal API tier",
                        verbose_name="Request Rate Limit (per minute)",
                    ),
                ),
            ],
            options={
                "verbose_name": "VirusTotal Analyzer",
                "verbose_name_plural": "VirusTotal Analyzers",
            },
            bases=("sentinelvision.analyzermodule",),
        ),
        migrations.CreateModel(
            name="EnrichedIOC",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ioc_type",
                    models.CharField(
                        choices=[
                            ("ip", "IP Address"),
                            ("domain", "Domain"),
                            ("url", "URL"),
                            ("md5", "MD5 Hash"),
                            ("sha1", "SHA1 Hash"),
                            ("sha256", "SHA256 Hash"),
                            ("email", "Email Address"),
                            ("cve", "CVE"),
                            ("filename", "Filename"),
                            ("filepath", "Filepath"),
                            ("registry", "Registry Key"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="IOC Type",
                    ),
                ),
                ("value", models.TextField(verbose_name="IOC Value")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("enriched", "Enriched"),
                            ("not_found", "Not Found"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Enrichment Status",
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="First Seen"
                    ),
                ),
                (
                    "last_checked",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Last Checked"
                    ),
                ),
                (
                    "last_matched",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Matched"
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="manual",
                        help_text="Original source of the IOC (alert, feed, manual)",
                        max_length=100,
                        verbose_name="Source",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "tlp",
                    models.CharField(
                        choices=[
                            ("white", "TLP:WHITE"),
                            ("green", "TLP:GREEN"),
                            ("amber", "TLP:AMBER"),
                            ("red", "TLP:RED"),
                        ],
                        default="amber",
                        max_length=10,
                        verbose_name="TLP",
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(default=0.0, verbose_name="Confidence"),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags associated with this IOC",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "es_index",
                    models.CharField(
                        blank=True,
                        help_text="Name of the Elasticsearch index where this IOC is stored",
                        max_length=100,
                        verbose_name="Elasticsearch Index",
                    ),
                ),
                (
                    "es_doc_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of the document in Elasticsearch",
                        max_length=100,
                        verbose_name="Elasticsearch Document ID",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enriched_iocs",
                        to="companies.company",
                        verbose_name="Company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Enriched IOC",
                "verbose_name_plural": "Enriched IOCs",
                "ordering": ["-last_checked"],
            },
        ),
        migrations.CreateModel(
            name="IOCFeedMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "match_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Match Time"
                    ),
                ),
                (
                    "feed_confidence",
                    models.FloatField(default=0.0, verbose_name="Feed Confidence"),
                ),
                (
                    "feed_tags",
                    models.JSONField(
                        blank=True, default=list, verbose_name="Feed Tags"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata about the match",
                        verbose_name="Metadata",
                    ),
                ),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ioc_matches",
                        to="sentinelvision.feedmodule",
                        verbose_name="Feed",
                    ),
                ),
                (
                    "ioc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_matches",
                        to="sentinelvision.enrichedioc",
                        verbose_name="IOC",
                    ),
                ),
            ],
            options={
                "verbose_name": "IOC-Feed Match",
                "verbose_name_plural": "IOC-Feed Matches",
                "ordering": ["-match_time"],
            },
        ),
        migrations.AddField(
            model_name="enrichedioc",
            name="matched_feeds",
            field=models.ManyToManyField(
                related_name="matched_iocs",
                through="sentinelvision.IOCFeedMatch",
                to="sentinelvision.feedmodule",
                verbose_name="Matched Feeds",
            ),
        ),
        migrations.CreateModel(
            name="ResponderModule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, verbose_name="Module Name")),
                (
                    "module_type",
                    models.CharField(
                        choices=[
                            ("feed", "Feed Module"),
                            ("analyzer", "Analyzer Module"),
                            ("responder", "Responder Module"),
                        ],
                        max_length=50,
                        verbose_name="Module Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "cron_schedule",
                    models.CharField(
                        blank=True,
                        help_text='Cron expression for scheduled execution (e.g., "0 */12 * * *" for every 12 hours)',
                        max_length=100,
                        verbose_name="Cron Schedule",
                    ),
                ),
                (
                    "last_run",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Run"
                    ),
                ),
                ("last_error", models.TextField(blank=True, verbose_name="Last Error")),
                (
                    "error_count",
                    models.PositiveIntegerField(default=0, verbose_name="Error Count"),
                ),
                (
                    "total_processed",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Processed"
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(default=0.0, verbose_name="Success Rate"),
                ),
                (
                    "response_type",
                    models.CharField(max_length=50, verbose_name="Response Type"),
                ),
                (
                    "severity_threshold",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Severity Threshold",
                    ),
                ),
                (
                    "auto_respond",
                    models.BooleanField(default=False, verbose_name="Auto Respond"),
                ),
                (
                    "total_responses",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Responses"
                    ),
                ),
                (
                    "total_successful",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Successful"
                    ),
                ),
                (
                    "total_failed",
                    models.PositiveIntegerField(default=0, verbose_name="Total Failed"),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        help_text="Leave empty for global modules accessible only to superadmins",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_modules",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Responder Module",
                "verbose_name_plural": "Responder Modules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ExecutionRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "module_name",
                    models.CharField(max_length=100, verbose_name="Module Name"),
                ),
                (
                    "module_type",
                    models.CharField(
                        default="generic", max_length=50, verbose_name="Module Type"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("success", "Success"),
                            ("error", "Error"),
                            ("timeout", "Timeout"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Started At"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed At"
                    ),
                ),
                (
                    "duration_seconds",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Duration (seconds)"
                    ),
                ),
                (
                    "result_count",
                    models.PositiveIntegerField(default=0, verbose_name="Result Count"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                (
                    "execution_log",
                    models.TextField(blank=True, verbose_name="Execution Log"),
                ),
                (
                    "input_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Input Data"
                    ),
                ),
                (
                    "output_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Output Data"
                    ),
                ),
                (
                    "execution_arguments",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Execution Arguments"
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_records",
                        to="alerts.alert",
                        verbose_name="Related Alert",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_records",
                        to="companies.company",
                    ),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="executed_modules",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Executed by",
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_records",
                        to="incidents.incident",
                        verbose_name="Related Incident",
                    ),
                ),
            ],
            options={
                "verbose_name": "Execution Record",
                "verbose_name_plural": "Execution Records",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["company", "module_type"],
                        name="sentinelvis_company_1f9533_idx",
                    ),
                    models.Index(
                        fields=["status"], name="sentinelvis_status_450a30_idx"
                    ),
                    models.Index(
                        fields=["started_at"], name="sentinelvis_started_a8489a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FeedExecutionRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Execution"),
                            ("scheduled", "Scheduled Execution"),
                        ],
                        default="manual",
                        max_length=20,
                        verbose_name="Execution Source",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Execution Status",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Started At"
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Ended At"
                    ),
                ),
                (
                    "log",
                    models.TextField(
                        blank=True,
                        help_text="Detailed log of the execution process",
                        verbose_name="Execution Log",
                    ),
                ),
                (
                    "iocs_processed",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of IOCs processed during execution",
                        verbose_name="IOCs Processed",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if execution failed",
                        verbose_name="Error Message",
                    ),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who triggered the execution (null if automated)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feed_executions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Executed By",
                    ),
                ),
                (
                    "feed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_records",
                        to="sentinelvision.feedmodule",
                        verbose_name="Feed Module",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feed Execution Record",
                "verbose_name_plural": "Feed Execution Records",
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["feed", "-started_at"],
                        name="sentinelvis_feed_id_d328c3_idx",
                    ),
                    models.Index(
                        fields=["status"], name="sentinelvis_status_30fc2c_idx"
                    ),
                    models.Index(
                        fields=["source"], name="sentinelvis_source_602205_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FeedRegistry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, verbose_name="Feed Name")),
                (
                    "feed_type",
                    models.CharField(max_length=50, verbose_name="Feed Type"),
                ),
                (
                    "source_url",
                    models.URLField(max_length=500, verbose_name="Source URL"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "sync_interval_hours",
                    models.PositiveIntegerField(
                        default=24, verbose_name="Sync Interval (hours)"
                    ),
                ),
                ("enabled", models.BooleanField(default=True, verbose_name="Enabled")),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("syncing", "Syncing"),
                            ("success", "Success"),
                            ("failure", "Failure"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Sync Status",
                    ),
                ),
                (
                    "last_sync",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Sync"
                    ),
                ),
                (
                    "next_sync",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Next Sync"
                    ),
                ),
                ("last_error", models.TextField(blank=True, verbose_name="Last Error")),
                (
                    "total_syncs",
                    models.PositiveIntegerField(default=0, verbose_name="Total Syncs"),
                ),
                (
                    "successful_syncs",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Successful Syncs"
                    ),
                ),
                (
                    "failed_syncs",
                    models.PositiveIntegerField(default=0, verbose_name="Failed Syncs"),
                ),
                (
                    "last_sync_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Last Sync Count"
                    ),
                ),
                (
                    "total_iocs",
                    models.PositiveIntegerField(default=0, verbose_name="Total IOCs"),
                ),
                (
                    "last_import_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Last Import Count"
                    ),
                ),
                (
                    "total_imports",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total Imports"
                    ),
                ),
                (
                    "error_count",
                    models.PositiveIntegerField(default=0, verbose_name="Error Count"),
                ),
                (
                    "config",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Configuration"
                    ),
                ),
                (
                    "headers",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="HTTP Headers"
                    ),
                ),
                (
                    "parser_options",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Parser Options"
                    ),
                ),
                ("last_log", models.TextField(blank=True, verbose_name="Last Log")),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feed_registries",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feed Registry",
                "verbose_name_plural": "Feed Registries",
                "ordering": ["name"],
                "indexes": [
                    models.Index(
                        fields=["company", "feed_type"],
                        name="sentinelvis_company_95e962_idx",
                    ),
                    models.Index(
                        fields=["sync_status"], name="sentinelvis_sync_st_a83056_idx"
                    ),
                    models.Index(
                        fields=["next_sync"], name="sentinelvis_next_sy_fd41fa_idx"
                    ),
                ],
                "unique_together": {("company", "feed_type")},
            },
        ),
        migrations.AddIndex(
            model_name="iocfeedmatch",
            index=models.Index(fields=["ioc", "feed"], name="sv_match_ioc_feed_idx"),
        ),
        migrations.AddIndex(
            model_name="iocfeedmatch",
            index=models.Index(fields=["match_time"], name="sv_match_time_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="iocfeedmatch",
            unique_together={("ioc", "feed")},
        ),
        migrations.AddIndex(
            model_name="enrichedioc",
            index=models.Index(
                fields=["company", "ioc_type"], name="sv_ioc_comp_type_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrichedioc",
            index=models.Index(
                fields=["company", "status"], name="sv_ioc_comp_status_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrichedioc",
            index=models.Index(fields=["value"], name="sv_ioc_value_idx"),
        ),
        migrations.AddIndex(
            model_name="enrichedioc",
            index=models.Index(fields=["last_checked"], name="sv_ioc_lastcheck_idx"),
        ),
        migrations.AddIndex(
            model_name="enrichedioc",
            index=models.Index(
                fields=["status", "last_checked"], name="sv_ioc_stat_check_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="enrichedioc",
            unique_together={("company", "ioc_type", "value")},
        ),
    ]
