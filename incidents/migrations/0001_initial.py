# Generated by Django 5.2 on 2025-05-02 21:05

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("companies", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IncidentObservable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_ioc",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this observable is an Indicator of Compromise for this incident",
                        verbose_name="Is an IOC",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Incident Observable",
                "verbose_name_plural": "Incident Observables",
            },
        ),
        migrations.CreateModel(
            name="IncidentTask",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Task priority (1-5, with 5 being highest)",
                        verbose_name="Priority",
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Due Date"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Completed at"
                    ),
                ),
            ],
            options={
                "verbose_name": "Incident Task",
                "verbose_name_plural": "Incident Tasks",
                "ordering": ["priority", "due_date", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="TimelineEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("updated", "Updated"),
                            ("status_changed", "Status Changed"),
                            ("assigned", "Assigned"),
                            ("alert_linked", "Alert Linked"),
                            ("task_added", "Task Added"),
                            ("task_completed", "Task Completed"),
                            ("note", "Note"),
                            ("action", "Action"),
                            ("system", "System"),
                            ("closed", "Closed"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                        verbose_name="Event Type",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "message",
                    models.TextField(blank=True, null=True, verbose_name="Message"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="Metadata"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Timestamp"
                    ),
                ),
            ],
            options={
                "verbose_name": "Timeline Event",
                "verbose_name_plural": "Timeline Events",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="Brief summary of the incident",
                        max_length=255,
                        verbose_name="Summary",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Severity",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="open",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "tlp",
                    models.IntegerField(
                        choices=[(0, "White"), (1, "Green"), (2, "Amber"), (3, "Red")],
                        default=2,
                        verbose_name="TLP (Traffic Light Protocol)",
                    ),
                ),
                (
                    "pap",
                    models.IntegerField(
                        choices=[(0, "White"), (1, "Green"), (2, "Amber")],
                        default=2,
                        verbose_name="PAP (Permissible Actions Protocol)",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Start Date"
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="End Date"
                    ),
                ),
                (
                    "impact_score",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Computed impact score of the incident (0-100)",
                        verbose_name="Impact Score",
                    ),
                ),
                (
                    "timeline",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Chronological order of events and actions",
                        verbose_name="Timeline",
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="User-defined metadata for the incident",
                        verbose_name="Custom Fields",
                    ),
                ),
                (
                    "linked_entities",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        help_text="Links to external systems (URLs, ticket IDs, etc.)",
                        size=None,
                        verbose_name="Linked Entities",
                    ),
                ),
                (
                    "sentinelvision_responders",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of SentinelVision responders to run on this incident",
                        verbose_name="SentinelVision Responders",
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to investigate this incident",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_incidents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assignee",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incidents",
                        to="companies.company",
                        verbose_name="Company",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_incidents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Incident",
                "verbose_name_plural": "Incidents",
                "ordering": ["-created_at"],
            },
        ),
    ]
